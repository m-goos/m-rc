name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # AWS steps
  S3_BUCKET_NAME: m-rc.nl
  CLOUDFRONT_ID: EWXWBUO12ME1G
  AWS_REGION: eu-west-1

jobs:
  ci-build-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Run CI and build in Node 24
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: 'npm'

      - run: npm ci
      - run: npm run prettier:ci

      # cache for nextjs - code snippet from nextjs docs
      - uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - run: npm run build # build checks types and runs linter
        env:
          NEXT_TELEMETRY_DISABLED: 1

      # Deploy steps - only run on push to main (not PRs)
      - name: Configure AWS credentials
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean S3 bucket
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: aws s3 rm s3://${{ env.S3_BUCKET_NAME }} --recursive

      - name: Sync to S3
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: aws s3 sync out/ s3://${{ env.S3_BUCKET_NAME }}

      - name: Invalidate CloudFront
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "Waiting for invalidation ${INVALIDATION_ID} to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ env.CLOUDFRONT_ID }} \
            --id ${INVALIDATION_ID}

      # # sync to S3
      # - uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: eu-central-1
      # - run: aws s3 rm s3://${{ vars.S3_PRODUCTION_BUCKET}} --recursive # clean up bucket
      # - run: aws s3 sync out/ s3://${{ vars.S3_PRODUCTION_BUCKET}} # push new build

      # - run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/*"
      # Needs updated AWS IAM role to access cloudflare
